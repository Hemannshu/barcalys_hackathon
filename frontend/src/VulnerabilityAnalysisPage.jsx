import React, { useState, useEffect, useCallback } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import './VulnerabilityAnalysisPage.css';

const VulnerabilityAnalysisPage = () => {
  const [password, setPassword] = useState('');
  const [analysis, setAnalysis] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    // Get password from navigation state if available
    if (location.state && location.state.password) {
      console.log('Password received from navigation state:', location.state.password);
      setPassword(location.state.password);
      analyzePassword(location.state.password);
    }
  }, [location]);

  const analyzePassword = async (pwdToAnalyze) => {
    setIsLoading(true);
    setError(null);
    
    try {
      console.log('Analyzing password:', pwdToAnalyze);
      
      // Get token from localStorage
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required. Please log in.');
        setIsLoading(false);
        return;
      }
      
      const response = await fetch('http://localhost:5000/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ password: pwdToAnalyze })
      });
      
      if (!response.ok) {
        if (response.status === 401) {
          setError('Authentication required. Please log in.');
          navigate('/login');
          return;
        }
        throw new Error(`Error: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Analysis result:', data);
      setAnalysis(data);
    } catch (err) {
      console.error('Error analyzing password:', err);
      setError('Failed to analyze password. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
  };

  const handleAnalyzeClick = () => {
    analyzePassword(password);
  };

  const getStrengthColor = (score) => {
    if (score >= 80) return '#4CAF50'; // Green
    if (score >= 60) return '#8BC34A'; // Light Green
    if (score >= 40) return '#FFC107'; // Amber
    if (score >= 20) return '#FF9800'; // Orange
    return '#F44336'; // Red
  };

  const getRiskLevelColor = (level) => {
    if (level === 'High') return '#F44336'; // Red
    if (level === 'Medium') return '#FF9800'; // Orange
    return '#4CAF50'; // Green
  };

  return (
    <div className="vulnerability-analysis-container">
      <h1>Password Vulnerability Analysis</h1>
      
      <div className="password-input-section">
        <input
          type="text"
          value={password}
          onChange={handlePasswordChange}
          placeholder="Enter password to analyze"
          className="password-input"
        />
        <button 
          onClick={handleAnalyzeClick} 
          className="analyze-button"
          disabled={isLoading || !password}
        >
          {isLoading ? 'Analyzing...' : 'Analyze Password'}
        </button>
      </div>
      
      {error && <div className="error-message">{error}</div>}
      
      {isLoading && (
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>Analyzing password strength...</p>
        </div>
      )}
      
      {analysis && !isLoading && (
        <div className="analysis-results">
          <div className="strength-meter">
            <h2>Password Strength</h2>
            <div className="strength-bar-container">
              <div 
                className="strength-bar" 
                style={{ 
                  width: `${analysis.strength_score}%`,
                  backgroundColor: getStrengthColor(analysis.strength_score)
                }}
              ></div>
            </div>
            <div className="strength-score">
              <span>Score: </span>
              <span style={{ color: getStrengthColor(analysis.strength_score) }}>
                {analysis.strength_score}/100
              </span>
              <span> ({analysis.strength_category})</span>
            </div>
            <div className="entropy-info">
              <span>Entropy: </span>
              <span>{analysis.entropy_bits.toFixed(2)} bits</span>
            </div>
          </div>
          
          <div className="crack-time-section">
            <h2>Estimated Time to Crack</h2>
            <div className="crack-time-grid">
              {Object.entries(analysis.crack_times).map(([algo, data]) => (
                <div key={algo} className="crack-time-item">
                  <h3>{algo.toUpperCase()}</h3>
                  <p>{data.time_readable}</p>
                </div>
              ))}
            </div>
          </div>
          
          {analysis.patterns.length > 0 && (
            <div className="patterns-section">
              <h2>Identified Patterns</h2>
              <ul className="patterns-list">
                {analysis.patterns.map((pattern, index) => (
                  <li key={index} className={`pattern-item ${pattern.severity}`}>
                    <span className="pattern-type">{pattern.type}:</span>
                    <span className="pattern-value">{pattern.pattern}</span>
                    <span className="pattern-severity">{pattern.severity}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}
          
          {analysis.attack_types.length > 0 && (
            <div className="attack-types-section">
              <h2>Vulnerable to Attacks</h2>
              <div className="attack-types-grid">
                {analysis.attack_types.map((attack, index) => (
                  <div 
                    key={index} 
                    className="attack-type-item"
                    style={{ borderColor: getRiskLevelColor(attack.risk_level) }}
                  >
                    <h3>{attack.name}</h3>
                    <p>{attack.description}</p>
                    <div className="risk-level" style={{ backgroundColor: getRiskLevelColor(attack.risk_level) }}>
                      {attack.risk_level} Risk
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {analysis.suggestions.length > 0 && (
            <div className="suggestions-section">
              <h2>Improvement Suggestions</h2>
              <ul className="suggestions-list">
                {analysis.suggestions.map((suggestion, index) => (
                  <li key={index} className="suggestion-item">
                    {suggestion}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default VulnerabilityAnalysisPage; 