import React, { useState, useCallback, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import VulnerabilityRadar from './VulnerabilityRadar';
import './VulnerabilityAnalysisPage.css';

const VulnerabilityAnalysisPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [password, setPassword] = useState('');
  const [analysis, setAnalysis] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    console.log('Location state:', location.state); // Debug log
    if (location.state?.password) {
      console.log('Password received:', location.state.password); // Debug log
      setPassword(location.state.password);
      analyzePassword(location.state.password);
    }
  }, [location]);

  const calculateAttackRiskScores = useCallback((pwd) => {
    if (!pwd) return {};
    
    const scores = {};
    const length = pwd.length;
    
    scores.DICTIONARY = /[a-z]{4,}/i.test(pwd) && !/[^a-z0-9]/i.test(pwd) 
      ? Math.min(100, 70 + (length * 2)) : 10;
    
    scores.BRUTE_FORCE = length < 8 
      ? Math.min(100, 30 + (60 - (length * 7.5))) 
      : Math.max(10, 50 - (length * 2));
    
    scores.PATTERN = /123|abc|qwerty|asdf|password/i.test(pwd) ? 85 : 15;
    
    scores.REPEATING = /(.)\1{2,}/.test(pwd) 
      ? Math.min(100, 60 + (pwd.match(/(.)\1{2,}/g)?.length * 10 || 0)) : 10;
    
    scores.PERSONAL_INFO = pwd.toLowerCase().includes('barclays') ? 90 : 10;
    
    scores.SPRAYING = ['password', '123456', 'welcome'].includes(pwd.toLowerCase()) ? 100 : 10;
    
    return scores;
  }, []);

  const attackTypes = {
    DICTIONARY: {
      name: "Dictionary Attack",
      description: "Uses common words/phrases",
      indicator: (pwd) => /[a-z]{4,}/i.test(pwd) && !/[^a-z0-9]/i.test(pwd),
      severity: "high"
    },
    BRUTE_FORCE: {
      name: "Brute Force",
      description: "Tries all combinations",
      indicator: (pwd) => pwd.length < 8,
      severity: "medium"
    },
    PATTERN: {
      name: "Pattern",
      description: "Targets common sequences",
      indicator: (pwd) => /123|abc|qwerty|asdf|password/i.test(pwd),
      severity: "high"
    },
    REPEATING: {
      name: "Repeating",
      description: "Exploits repeated patterns",
      indicator: (pwd) => /(.)\1{2,}/.test(pwd),
      severity: "medium"
    },
    PERSONAL_INFO: {
      name: "Personal Info",
      description: "Uses names/birthdays",
      indicator: (pwd) => pwd.toLowerCase().includes('barclays'),
      severity: "high"
    },
    SPRAYING: {
      name: "Spraying",
      description: "Tries common passwords",
      indicator: (pwd) => ['password', '123456', 'welcome'].includes(pwd.toLowerCase()),
      severity: "critical"
    }
  };

  const analyzePassword = useCallback((pwdToAnalyze) => {
    const pwd = pwdToAnalyze || password;
    if (!pwd?.trim()) {
      setAnalysis(null);
      return;
    }

    console.log('Analyzing password:', pwd); // Debug log
    setIsLoading(true);
    try {
      const riskScores = calculateAttackRiskScores(pwd);
      const vulnerabilities = Object.entries(attackTypes).map(([key, attack]) => ({
        id: key,
        name: attack.name,
        description: attack.description,
        severity: attack.severity,
        riskScore: riskScores[key] || 0,
        isVulnerable: attack.indicator(pwd)
      }));

      console.log('Analysis results:', vulnerabilities); // Debug log
      setAnalysis({ vulnerabilities });
    } catch (error) {
      console.error("Analysis error:", error);
      setAnalysis(null);
    } finally {
      setIsLoading(false);
    }
  }, [password, calculateAttackRiskScores]);

  return (
    <div className="vulnerability-analysis-page">
      <button className="back-button" onClick={() => navigate('/')}>
        ‚Üê Back to Password Analyzer
      </button>

      <div className="analysis-container">
        <h2>Password Vulnerability Analysis</h2>
        
        <div className="input-section">
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Enter your password"
            className="password-input"
          />
          <button 
            onClick={() => analyzePassword()}
            disabled={isLoading || !password}
            className="analyze-button"
          >
            {isLoading ? 'Analyzing...' : 'Analyze Vulnerabilities'}
          </button>
        </div>

        {isLoading && (
          <div className="loading-spinner">
            <div className="spinner"></div>
          </div>
        )}

        {analysis && (
          <div className="results-section">
            <VulnerabilityRadar vulnerabilities={analysis.vulnerabilities} />
            
            <div className="vulnerability-details">
              {analysis.vulnerabilities.map(vuln => (
                <div key={vuln.id} className={`vulnerability-card ${vuln.severity}`}>
                  <div className="vulnerability-header">
                    <h4>{vuln.name}</h4>
                    <div className="risk-score">{vuln.riskScore}%</div>
                  </div>
                  <p className="vulnerability-description">{vuln.description}</p>
                  <div className="risk-meter">
                    <div 
                      className="risk-meter-fill" 
                      style={{ width: `${vuln.riskScore}%` }}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityAnalysisPage; 