import React, { useEffect, useRef } from 'react';
import './VulnerabilityRadar.css';

const VulnerabilityRadar = ({ vulnerabilities }) => {
  const canvasRef = useRef(null);

  useEffect(() => {
    if (!vulnerabilities || vulnerabilities.length === 0) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const radius = Math.min(centerX, centerY) - 50;

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw background circles
    for (let i = 1; i <= 5; i++) {
      ctx.beginPath();
      ctx.arc(centerX, centerY, (radius * i) / 5, 0, Math.PI * 2);
      ctx.strokeStyle = 'rgba(200, 200, 200, 0.3)';
      ctx.stroke();
    }

    // Draw axis lines
    const angleStep = (Math.PI * 2) / vulnerabilities.length;
    vulnerabilities.forEach((vuln, index) => {
      const angle = index * angleStep - Math.PI / 2;
      const x = centerX + Math.cos(angle) * radius;
      const y = centerY + Math.sin(angle) * radius;

      // Draw axis line
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.lineTo(x, y);
      ctx.strokeStyle = 'rgba(200, 200, 200, 0.5)';
      ctx.stroke();

      // Draw attack type label
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(angle + Math.PI / 2);
      ctx.textAlign = 'center';
      ctx.fillStyle = '#333';
      ctx.font = '12px Arial';
      ctx.fillText(vuln.name, 0, -10);
      ctx.restore();
    });

    // Draw vulnerability polygon
    ctx.beginPath();
    vulnerabilities.forEach((vuln, index) => {
      const angle = index * angleStep - Math.PI / 2;
      const distance = (vuln.riskScore / 100) * radius;
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;

      if (index === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    });
    ctx.closePath();

    // Fill polygon with gradient
    const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius);
    gradient.addColorStop(0, 'rgba(255, 99, 71, 0.2)');
    gradient.addColorStop(1, 'rgba(255, 99, 71, 0.1)');
    ctx.fillStyle = gradient;
    ctx.fill();

    // Draw polygon border
    ctx.strokeStyle = 'rgba(255, 99, 71, 0.8)';
    ctx.lineWidth = 2;
    ctx.stroke();

    // Draw center point
    ctx.beginPath();
    ctx.arc(centerX, centerY, 5, 0, Math.PI * 2);
    ctx.fillStyle = '#333';
    ctx.fill();

    // Draw risk score labels
    vulnerabilities.forEach((vuln, index) => {
      const angle = index * angleStep - Math.PI / 2;
      const distance = (vuln.riskScore / 100) * radius;
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;

      ctx.beginPath();
      ctx.arc(x, y, 4, 0, Math.PI * 2);
      ctx.fillStyle = vuln.severity === 'critical' ? '#ff4444' :
                     vuln.severity === 'high' ? '#ff8800' :
                     vuln.severity === 'medium' ? '#ffbb33' : '#00C851';
      ctx.fill();

      // Draw risk score
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(angle + Math.PI / 2);
      ctx.textAlign = 'center';
      ctx.fillStyle = '#333';
      ctx.font = 'bold 12px Arial';
      ctx.fillText(`${vuln.riskScore}%`, 0, -15);
      ctx.restore();
    });

  }, [vulnerabilities]);

  return (
    <div className="vulnerability-radar">
      <h3>Vulnerability Analysis</h3>
      <div className="radar-container">
        <canvas
          ref={canvasRef}
          width={600}
          height={600}
        />
      </div>
      <div className="legend">
        <div className="legend-item">
          <span className="dot critical"></span>
          <span>Critical Risk</span>
        </div>
        <div className="legend-item">
          <span className="dot high"></span>
          <span>High Risk</span>
        </div>
        <div className="legend-item">
          <span className="dot medium"></span>
          <span>Medium Risk</span>
        </div>
        <div className="legend-item">
          <span className="dot low"></span>
          <span>Low Risk</span>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityRadar; 